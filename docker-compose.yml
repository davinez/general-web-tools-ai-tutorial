services:
  # core-app:
  #   build: .
  #   environment:
  #    - ASPNETCORE_CoreApp_DatabaseProvider=${ASPNETCORE_CoreApp_DatabaseProvider}
  #    - ASPNETCORE_CoreApp_ConnectionString=${ASPNETCORE_CoreApp_ConnectionString}
  #   ports:
  #    - "5000:5000"
  #   networks:
  #     - gwtai-network

  core-app-db:
    container_name: core-app-db 
    # Docker uses the default tag latest if there are no tags defined in the pull request.
    image: postgres:16.4
    #restart: always
    ports:
      - "5433:5433"
    environment:
      PGPORT: 5433
      POSTGRES_USER: coredev
      POSTGRES_PASSWORD: corepassdev
      POSTGRES_DB: CoreAppDb
    volumes:
      - ./containers-data/data/core-app-db:/var/lib/postgresql/data
    networks:
      - gwtai-network

  cosmosdbemulator:
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator
    container_name: cosmosdb-emulator
    ports:
      - "8081:8081" # REST API endpoint  https://localhost:8081/_explorer/index.html UI
      - "10251:10251" # MongoDB endpoint
      - "10252:10252" # MongoDB endpoint
      - "10253:10253" # MongoDB endpoint
      - "10254:10254" # MongoDB endpoint
    environment:
      AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 3 # Optional: Set partition count
      AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: "true" # Enable data persistence
      AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: "127.0.0.1" # Ensure correct binding
    volumes:
      - ./containers-data/cosmosdb-data:/data # Persist data locally
    networks:
      - gwtai-network

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin4_container
  #   #restart: always
  #   ports:
  #     - "8888:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: localdev@domain-name.com
  #     PGADMIN_DEFAULT_PASSWORD: localpass
  #   volumes:
  #     - ./db-pgadmin-data:/var/lib/pgadmin
  #   networks:
  #     - gwtai-network

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
    - '5540:5540'
    volumes:
      - ./containers-data/redisinsight:/redis/data/redisinsight
    networks:
      - gwtai-network

  # Default account
  # Account name: devstoreaccount1
  # Account key: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
  # Full Connection string
  # DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    #restart: always
    ports:
      - "10000:10000" # will expose blob service's default listening port
      - "10001:10001" # will expose queue service's default listening port
      - "10002:10002" # will expose table service's default listening port
    volumes:
      - ./containers-data/azurite:/data # Persist data locally
    networks:
      - gwtai-network  

# docker network create gwtainetwork
networks:
  gwtai-network :
    name: gwtainetwork 
    driver: bridge
    external: true

# After compose up, docker exec -it ollama_service ollama run llama3
# docker compose -f .\docker-compose.gwtai.yml up




      