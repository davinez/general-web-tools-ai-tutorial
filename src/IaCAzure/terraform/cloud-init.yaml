# This script runs on the VM's first boot. (Approach A: Bash/Automated)

package_update: true
packages:
  - git
  - docker.io
  - docker-compose
  - wget # Needed for the keyring download 

# docker compose -f docker/docker-compose.uv.gpu.yml --profile frontend up --build
write_files:
  # This is PART 2 of your script. It will run AFTER the reboot.
  - path: /opt/post-boot-setup.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      
      # 1. Restart Docker to make sure it sees the NVIDIA runtime
      systemctl restart docker

      # 2. Clone the repo
      git clone https://github.com/davinez/general-web-tools-ai-tutorial.git /home/azureuser/chatterbox-app
      chown -R azureuser:azureuser /home/azureuser/chatterbox-app
      
      # 3. Add azureuser to docker group
      usermod -aG docker azureuser
      
      # 4. Run Docker Compose as azureuser
      # We use 'su -l' to log in as the user, which loads their new 'docker' group membership   
      su -l azureuser -c "cd /home/azureuser/chatterbox-app/src/CoreAI && docker-compose -f docker/docker-compose.uv.gpu.yml --profile frontend up --build -d &> /tmp/docker-compose-setup.log"

      # 5. Disable this service so it doesn't run on future boots
      systemctl disable post-boot-setup.service

  # This file creates the systemd service that will run the script above
  - path: /etc/systemd/system/post-boot-setup.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Run setup script after GPU driver install and reboot
      # We want this to run after the network is up and Docker has started
      After=network-online.target docker.service
      Wants=network-online.target docker.service

      [Service]
      Type=oneshot
      ExecStart=/opt/post-boot-setup.sh
      RemainAfterExit=true

      [Install]
      WantedBy=multi-user.target

runcmd:
  # --- PART 1: Runs on the VM's FIRST boot ---
  # 1. Add the NVIDIA CUDA repository
  - ['wget', 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb']
  - ['dpkg', '-i', 'cuda-keyring_1.1-1_all.deb']
  - ['rm', 'cuda-keyring_1.1-1_all.deb']
  - ['apt-get', 'update']  

  # 2. Install the driver (and its dependencies)
  # 'cuda-drivers' is a meta-package that installs the latest driver.
  # This is much cleaner than installing the full 'cuda-toolkit'.
  - ['apt-get', 'install', '-y', 'cuda-drivers']

  # 3. Install the NVIDIA Container Toolkit (AFTER the driver)
  - ['apt-get', 'install', '-y', 'nvidia-container-toolkit']

  # 4. CRITICAL: Configure Docker to use the NVIDIA runtime
  # This modifies /etc/docker/daemon.json
  - ['nvidia-ctk', 'runtime', 'configure', '--runtime=docker']

  # 5. Enable the custom service to run ONCE on the *next* boot
  - ['systemctl', 'enable', 'post-boot-setup.service']
  
  # 6. Reboot.
  # The driver will load, and Docker will restart with the new config.
  # Then, post-boot-setup.service will run.
  - ['reboot', 'now']